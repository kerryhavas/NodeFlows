module.exports = function (app) {

    var nodeFlows = require('nodeFlows');

    var workflowManager = nodeFlows.workflowManager;


    // createworkflow page
    app.get('/workflows/create', function (req, res) {
        var workflowType = require("url").parse(req.url, true).query.workflow;
        var workflowModule = nodeFlows.workflowManager.getWorkflowModule(workflowType).module;
        nodeFlows.log("Module:" + JSON.stringify(workflowModule));
        //nodeFlows.log("Parameters length:" + workflowModule.workflowDefinition.Parameters.length);

        res.render('../node_modules/nodeFlowsExpressClient/views/createWorkflow', { title: 'Create an Workflow', workflows: workflowManager.getWorkflowDefinitions(), workflowType: workflowType, workflowModule: workflowModule.workflowDefinition })
    });

    app.get('/workflows/select', function (req, res) {
        res.render('../node_modules/nodeFlowsExpressClient/views/selectWorkflow', { title: 'Select a Workflow', workflows: workflowManager.getWorkflowDefinitions() })
    });

    app.get('/workflows/definitions', function (req, res) {
        res.render('../node_modules/nodeFlowsExpressClient/views/workflowdefinitions', { title: 'Select a workflow definition', workflows: workflowManager.getWorkflowDefinitions() })
    });

    app.get('/workflows/viewWorkflow', function (req, res) {
        var workflowType = require("url").parse(req.url, true).query.workflowType;
        var workflowModule = nodeFlows.workflowManager.getWorkflowModule(workflowType).module;

        res.render('../node_modules/nodeFlowsExpressClient/views/viewWorkflowDefinition', { title: 'View a Workflow Definition', workflowDefinition: workflowModule.workflowDefinition })
    });


    // createworkflow page POST
    app.post('/workflows/create', function (req, res) {

        var data = req.body;
        var workflowDefinition = data.workflowDefinition;
        var workflowModule = nodeFlows.workflowManager.getWorkflowModule(workflowDefinition).module;

        var args = data.args;
        if (args == '') { args = "{}" };
        var argsData = eval("(" + args + ")");

        if (workflowModule.workflowDefinition.Parameters != undefined) {
            for (var i = 0; i < workflowModule.workflowDefinition.Parameters.length; i++) {
                var parameter = workflowModule.workflowDefinition.Parameters[i];
                nodeFlows.log("Parameter:" + parameter.name);
                var parameterValue = data["Parameter_" + parameter.name]
                nodeFlows.log("Parameter value:" + parameterValue);
                argsData[parameter.name] = parameterValue;
            }
        }

        if (workflowDefinition == '') {
            workflowDefinition = "PizzaOrdering/pizzaOrderingWorkflow";
        }

        if (argsData == undefined) { argsData = {} };

        nodeFlows.log("Request received to create a workflow of type:" + workflowDefinition + " with args:" + JSON.stringify(argsData));

        argsData.workflowDefinition = workflowDefinition;
        //nodeFlows.statManager.statsEmitter.emit('createWorkflowInstance', argsData);

        nodeFlows.queueManager.enqueueAsync(argsData);
        //nodeFlows.log("Queued");


        nodeFlows.workflowManager.getActiveWorkflows(function (activeWorkflows) {
            res.render('../node_modules/nodeFlowsExpressClient/views/activeWorkflows', { title: 'Active Workflows', workflows: activeWorkflows })
        });

    });

    // createworkflow page POST
    app.post('/rest/workflows/create', function (req, res) {
        var data = req.body;
        var workflowDefinition = data.workflowDefinition;
        var args = data.args;
        if (args == '') { args = "{}" };
        var argsData = eval("(" + args + ")");

        if (workflowDefinition == '') {
            workflowDefinition = "PizzaOrdering/pizzaOrderingWorkflow";
        }

        nodeFlows.log("/rest/workflows/create of type:" + workflowDefinition + " with args:" + args);

        nodeFlows.createWorkflow(workflowDefinition, argsData, function (workflow) {
            nodeFlows.getWorkflow(workflow._id.toString(), function (err, workflow) {
                res.write(JSON.stringify({}));
                res.end();
                //res.render('../node_modules/nodeFlowsExpressClient/views/viewWorkflow', { title: 'View an Workflow', 'workflow': workflow })
            });
        });

    });

    // updateworkflow page
    app.get('/updateworkflow', function (req, res) {
        res.render('../node_modules/nodeFlowsExpressClient/views/UpdateWorkflow', { title: 'Update a Workflow.  ' })
    });

    // updateworkflowpost page
    app.post('/updateworkflow', function (req, res) {
        var data = req.body;
        var objectChange = eval("(" + data.message + ")");

        nodeFlows.updateWorkflow(data.workflowid, objectChange, function () {
            res.end("Update Workflow Posted:" + data.message + " " + data.workflowid);
            nodeFlows.processWorkflow(data.workflowid);
        });
    });



    // deleteWorkflow page
    app.get('/workflows/active/delete', function (req, res) {
        //res.render('createWorkflow', { title: 'Create an Workflow' })
        nodeFlows.log("Req:" + req.url);
        var workflowid = require("url").parse(req.url, true).query.workflowid;
        nodeFlows.log("Query:" + workflowid);
        nodeFlows.deleteWorkflow(workflowid, function () {
            res.statusCode = 302;
            res.setHeader("Location", "/workflows/active");
            res.end();
        });
    });

    // viewWorkflow page
    app.get('/workflows/view', function (req, res) {
        //
        nodeFlows.log("Req:" + req.url);
        var workflowid = require("url").parse(req.url, true).query.workflowid;
        nodeFlows.log("Query:" + workflowid);

        workflowManager.getWorkFlowHistoryItem(workflowid, function (workflow) {
            nodeFlows.historyManager.getWorkerHistory(nodeFlows.SUBSYSTEM_WORKFLOW, workflowid, function (workflowHistory) {
                res.render('../node_modules/nodeFlowsExpressClient/views/viewWorkflow', { title: 'View a Workflow Instance', workflow: workflow, history: workflowHistory })
            });
        });


    });





    // Get Active Workflows
    app.get('/workflows/active', function (req, res) {
        workflowManager.getActiveWorkflows(function (activeWorkflows) {
            res.render('../node_modules/nodeFlowsExpressClient/views/activeWorkflows', { title: 'Active Workflows2', workflows: activeWorkflows })
        });
    });

    app.get('/workflows/active/view', function (req, res) {
        //
        nodeFlows.log("Req:" + req.url);
        var workflowid = require("url").parse(req.url, true).query.workflowid;
        nodeFlows.log("Query:" + workflowid);

        workflowManager.getWorkflow(workflowid, function (workflow) {
            nodeFlows.historyManager.getWorkerHistory(nodeFlows.SUBSYSTEM_WORKFLOW, workflowid, function (workflowHistory) {
                res.render('../node_modules/nodeFlowsExpressClient/views/viewWorkflow', { title: 'View a Workflow Instance', workflow: workflow, history: workflowHistory })
            });
        });
    });

    app.get('/workflows/active/pause', function (req, res) {
        //
        nodeFlows.log("Req:" + req.url);
        var workflowid = require("url").parse(req.url, true).query.workflowid;
        nodeFlows.log("Pause Workflow:" + workflowid);

        workflowManager.getWorkflow(workflowid, function (workflow) {
            workflow.pauseWorkflow("Pause from view");
            workflowManager.getActiveWorkflows(function (activeWorkflows) {
                res.render('../node_modules/nodeFlowsExpressClient/views/activeWorkflows', { title: 'Active Workflows', "workflows": activeWorkflows })
            });
        });
    });


    app.get('/workflows/active/resume', function (req, res) {
        //
        nodeFlows.log("Req:" + req.url);
        var workflowid = require("url").parse(req.url, true).query.workflowid;
        nodeFlows.log("Resume Workflow:" + workflowid);

        workflowManager.getWorkflow(workflowid, function (workflow) {
            workflow.resumeWorkflow("Resume from view");
            workflowManager.getActiveWorkflows(function (activeWorkflows) {
                res.render('../node_modules/nodeFlowsExpressClient/views/activeWorkflows', { title: 'Active Workflows', "workflows": activeWorkflows })
            });
        });
    });

    // Get Workflows List
    app.get('/workflows/history', function (req, res) {
        workflowManager.getWorkflowHistory(function (workflows) {
            res.render('../node_modules/nodeFlowsExpressClient/views/workflowHistory', { title: 'View Workflow History', "workflows": workflows })
        });
    });



}