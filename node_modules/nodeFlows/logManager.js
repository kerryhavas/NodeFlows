exports.log = log;
exports.logException = logException;
exports.getLogHistory = getLogHistory;
exports.logError = logError;
exports.clearLog = clearLog;
exports.throwIfUndefined = throwIfUndefined;
exports.logCallStack = logCallStack;


var logHistory = [];

var logToConsole = true;
var logToMemory = true;


Object.defineProperty(exports, 'logToMemory', {
    get: function () {
        return logToMemory;
    },
    set: function (data) {
        logToMemory = data;
    }
});

function throwIfUndefined(parameter, message){
    if (parameter===undefined){
        logError(message);
        throw new Error(message)
    }
}

function clearLog(){
    logHistory = [];
};

function getLogHistory() {
    return logHistory;
};

//level = Info, Warning, Error
function log(text, level, subsystem) {

    var logEntry = { logText: text, date: new Date().getTime(), subsystem: subsystem };

    
    if (exports.logToConsole){
        if(level == undefined) {
            console.log("Logging>>" + text);
        }
    }

    if(level == "Exception") {
        console.log("Exception>>" + text);
    }
    if (exports.logToMemory){
        logHistory.push(logEntry);
    }
}

function logException(ex,notes){

    var logText = "Description:" + ex.description + " Data:" + ex.data + " Line:" + ex.line + " LineText:" + ex.lineText + " Source:" + ex.source;

    console.log(logText);
    logHistory.push({logText:"Exception - Name: " + ex.name + " Message: " + ex.message, subsystem: "Exception"});
    logHistory.push({logText:logText, subsystem: "Exception"});
    if (notes !== undefined) {
        logHistory.push({ logText: "Notes:" + notes, subsystem: "Exception" });
    }
    logHistory.push({logText:ex.stack, subsystem: "Exception"});
    //logHistory.push({logText: JSON.stringify(ex)});

}

function logError(message){
    //Artificially throw an error to get the call stack
    try {
        throw new Error(message);
    }
    catch (ex){
       // logHistory.push({logText:message});
        logException(ex);
    }
    
}

function logCallStack(){
    //Artificially throw an error to get the call stack
    try {
        throw new Error("random");
    }
    catch (ex){
       // logHistory.push({logText:message});
        logFakeException(ex);
    }
}

function logFakeException(ex){

    //var logText = "Description:" + ex.description + " Data:" + ex.data + " Line:" + ex.line + " LineText:" + ex.lineText + " Source:" + ex.source;

    //console.log(logText);
    //logHistory.push({logText:"Exception - Name: " + ex.name + " Message: " + ex.message});
    //logHistory.push({logText:logText});
   // if (notes !== undefined) {
    //    logHistory.push({ logText: "Notes:" + notes });
   // }
    logHistory.push({logText:ex.stack});
    //logHistory.push({logText: JSON.stringify(ex)});

}


