
var logging = require("./logManager.js");
var log = require("./logManager.js").log;
var logException = require("./logManager.js").logException;
var logError = require("./logManager.js").logError;
var statManager = require("./statManager.js");

exports.insertWorkflowInstance = insertWorkflowInstance;
exports.removeWorkflowInstance = removeWorkflowInstance;
exports.retrieveWorkflowInstance = retrieveWorkflowInstance;
exports.updateWorkflowInstance = updateWorkflowInstance;
exports.allWorkflowInstances = allWorkflowInstances;

exports.SUBSYSTEM = "Persistence";
exports.MODULE = "Moq";


var workflowStorage = {};

// Array Remove - By John Resig (MIT Licensed)
 Array.prototype.remove = function(from, to) {
   var rest = this.slice((to || from) + 1 || this.length);
   this.length = from < 0 ? this.length + from : from;
   return this.push.apply(this, rest);
 };

function allWorkflowInstances(callback) {
    //logging.log("allWorkflowInstances");

    var returnArray = [];
    for(var workflowid in workflowStorage) {
        //logging.log("Retrieving workflow:" + workflowid);
        returnArray.push(workflowStorage[workflowid]);
    }
    callback(returnArray);
};

function insertWorkflowInstance(workflow, callback) {
    logging.log("insertWorkflowInstance");

    //var objectId = new ObjectID();
    //workflow._id = objectId;
    //logging.log("New objectid:" + workflow._id.toString());

    workflowStorage[workflow._id.toString()]=workflow;
    logging.log("Object inserted into MOQ storage");
    //statManager.statsEmitter.emit('StatEvent', "insertWorkflowInstance");
    statManager.statsEmitter.emit('StatEvent2', {subsystem:exports.SUBSYSTEM,module:exports.MODULE,statName:"insertWorkflowInstance"});
    callback(workflow);

}

function removeWorkflowInstance(workflowId, callback) {
    logging.log("removeWorkflowInstance:" + workflowId);
    delete workflowStorage[workflowId];
    statManager.statsEmitter.emit('StatEvent2', {subsystem:exports.SUBSYSTEM,module:exports.MODULE,statName:"removeWorkflowInstance"});
    //statManager.statsEmitter.emit('StatEvent', "removeWorkFlowInstance");
    callback();

};

function retrieveWorkflowInstance(workflowId, callback) {
    logging.log("retrieveWorkflowInstance:" + workflowId);

    var workflow = workflowStorage[workflowId];
    if(workflow == null) {
        
        logError("Workflow retrieved from persistence is null:" + workflowId);
        callback(undefined);
    }
    else{
        statManager.statsEmitter.emit('StatEvent2', {subsystem:exports.SUBSYSTEM,module:exports.MODULE,statName:"retrieveWorkflowInstance"});
        //statManager.statsEmitter.emit('StatEvent', "retrieveWorkflowInstance");
        callback(workflow);
    }

}

function updateWorkflowInstance(workflowId, updateData, callback) {
    logging.log("updateWorkflowInstance:" + workflowId);
    try
    {
        var workflow = workflowStorage[workflowId];
        for(var property in updateData) {
            log("Updating property:" + property + " to " + updateData[property]);
            workflow[property] = updateData[property];
        };
        statManager.statsEmitter.emit('StatEvent2', {subsystem:exports.SUBSYSTEM,module:exports.MODULE,statName:"updateWorkflowInstance"});
        //statManager.statsEmitter.emit('StatEvent', "updateWorkflowInstance");
        log("Finished updating workflowinstance");
        callback(null); //TODO: add error handling
    }
    catch (ex){
        logException(ex);
    }
}

/*
function getCollection(collectionName, callback) {
    logging.log("getCollection:" + collectionName);

    persistence.mongoConnection(function(connection) {
        logging.log("Nodeflows:Opening collection");
        connection.collection(collectionName, function(err, collection) {
            if(err) {
                var log = "MongoDB Collection Error: " + err;
                logging.log(log);
                res.end(log);
            }
            else {
                logging.log("MongoDB collection opened");
                callback(collection);
            }
        });
    });
}
*/
