var Events = require('events');
var fs = require("fs");
var logging = require("./logManager.js");
var logError = require("./logManager.js").logError;
var statManager = require("./statManager.js");
var nodeFlows = require('../nodeFlows');
var workflowManager = require("./workflowManager.js");
var queueManager = require("./queueManager.js");

exports.setWakeup = setWakeup;


var timer;
var wakeUps = [];
var counter = 0;
var interval = setInterval(function () {
    //logging.log('NodeFlowsTimer:' + counter);

    wakeUps.forEach(function (wakeup) {
        if (wakeup.active) {
            //logging.log("Wakeup at:" + wakeup.wakeupTime);
            //logging.log("Its Now:" + new Date().getTime());
            if (wakeup.wakeupTime < new Date().getTime()) {
                logging.log("Wake Up! Workflow:" + wakeup.workflowId);
                wakeup.active = false;
                workflowManager.getWorkflow(wakeup.workflowId, function (workflow) {
                    logging.log("Workflow Loaded!");
                    workflow.addHistory({ task: "WakeUp", notes: "WakeupTime:" + wakeup.wakeupTime });

                    if (wakeup.workflowStep != undefined) {
                        //The wakeup specifies a step to go to

                        workflow.updateWorkflow({ currentStepName: wakeup.workflowStep }, function () {
                            var queueItem = workflow.getQueueItem();
                            queueItem.updateQueueItem({ status: "resume" }, function () {
                                //A worker should pick it up shortly after resume is set;
                                queueManager.findIdleWorker(queueItem, workflow,function(queueWorker){
                                    //do nothing if one is not found
                                });
                            });
                        });
                    }
                    else {
                        //This workflow should just go to the next step
                        //logError("Does it ever get here?" + wakeup.workflowId)
                        workflow.getQueueItem(function(queueItem){
                            workflow.gotoNextStep(function () {
                                queueItem.updateQueueItem({ status: "resume" }, function () {
                                    queueItem.addHistory({task: "TimerResume", notes: "Resuming queueItem"});
                                    //A worker should pick it up shortly after resume is set;
                                    queueManager.findIdleWorker(queueItem, workflow,function(queueWorker){
                                        //do nothing if one is not found
                                    });
                                });
                            });
                        });
                    };

                });
            };
        };
    });




    //counter++;
    /*
    if(counter >= 5000) {
    clearInterval(interval);
    }
    */
}, 100);


function setWakeup(timeInterval,workflowId, workflowStep) {
    var wakeup = {};
    var futureDate = new Date();
    var expdate = futureDate.getTime();
    expdate += timeInterval
    futureDate.setTime(expdate);
    wakeup.wakeupTime = futureDate
    wakeup.active = true;
    wakeup.workflowId = workflowId;
    wakeup.workflowStep = workflowStep
    wakeUps.push(wakeup);
    //TODO persist wakeups
}


var secondInterval = setInterval(function () {
    statManager.statsEmitter.emit('SecondTimer', {});
}, 1000);


