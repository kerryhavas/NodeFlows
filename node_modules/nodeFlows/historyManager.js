var logManager = require('./logManager.js');
var nodeFlows = require('./nodeFlows');
var statManager = require("./statManager.js");

var historyEnabled = true;

exports.addHistory = addHistory;
exports.getWorkerHistory = getWorkerHistory;
exports.clearHistory = clearHistory;

var subsystemHistory = {};

Object.defineProperty(exports, 'historyEnabled', {
    get: function () {
        return historyEnabled;
    },
    set: function (data) {
        historyEnabled = data;
    }
});

var writeHistoryToLog = true;
Object.defineProperty(exports, 'writeHistoryToLog', {
    get: function () {
        return writeHistoryToLog;
    },
    set: function (val) {
        writeHistoryToLog = val;
    }
});


statManager.statsEmitter.on('History', function (historyItem) {
    addHistory(historyItem.subsystem, historyItem.id, historyItem.history);
    if (writeHistoryToLog) {
        logManager.log("History:" + historyItem.subsystem + "/Id:" + historyItem.id + "/" + JSON.stringify(historyItem.history));
    }
});

function getSubsystemWorkerStorage(subsystem,workerId,callback){
    var subsystemStorage = subsystemHistory[subsystem];
    if (subsystemStorage === undefined) {
        logManager.log("historyManager_AddingSubsystem:" + subsystem);
        subsystemStorage = { workerStorage: {} };
        subsystemHistory[subsystem] = subsystemStorage;
    }
    var subsystemWorkerStorage = subsystemStorage.workerStorage[workerId];
    if (subsystemWorkerStorage === undefined) {
        logManager.log("historyManager_AddingSubsystemWorker:" + workerId);
        subsystemWorkerStorage = { history: [] };
        subsystemStorage.workerStorage[workerId] = subsystemWorkerStorage;
    }
    callback(subsystemWorkerStorage);
}

function clearHistory(){
  subsystemHistory == {};  
};


function getWorkerHistory(subsystem,workerId,callback){
    logManager.log("getWorkerHistory:" + subsystem + "/" + workerId + "/");

    getSubsystemWorkerStorage(subsystem, workerId, function (subsystemWorkerStorage) {
        process.nextTick(function(){
            callback(subsystemWorkerStorage.history);
        })
    });
}

function addHistory(subsystem,workerId,history){
    try {
     //   if (history.enabledOverride!==undefined){
     //       if (!history.enabledOverride) return;
      //  }
      //  else{
            if (!historyEnabled) return;
      //  }
        

        getSubsystemWorkerStorage(subsystem, workerId, function (subsystemWorkerStorage) {
            //Add any additional properties to history
            history.timeStamp = new Date().getTime();
            history.relativeTimeStamp = nodeFlows.getRelativeTime();
            history.workerId = workerId;
            history.subsystem = subsystem;

            process.nextTick(function () {
                subsystemWorkerStorage.history.push(history);
            });

            //logManager.log("historyManager_addHistory_HistoryAdded:" + JSON.stringify(history));
        });

    }
    catch (ex) {
        logManager.logException(ex);
    }

};

