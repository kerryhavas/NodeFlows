var mongodb = require('mongodb');
var ObjectID = require('mongodb').ObjectID;
var logManager = require("./logManager.js");
var logException = logManager.logException;
var logError = logManager.logError;
var statManager = require("./statManager.js");
var Workflow = require('./workflow').Workflow;
var QueueItem = require('./queueItem').QueueItem;

//exports.mongoConnection = mongoConnection;

exports.initializeStorage = initializeStorage;

//Workflow Persistence Methods
exports.insertWorkflowInstance = insertWorkflowInstance;
exports.removeWorkflowInstance = removeWorkflowInstance;
exports.retrieveWorkflowInstance = retrieveWorkflowInstance;
exports.updateWorkflowInstance = updateWorkflowInstance;
exports.allWorkflowInstances = allWorkflowInstances;
exports.persistWorkflowToHistory = persistWorkflowToHistory;
exports.getWorkflowHistory = getWorkflowHistory;
exports.getWorkflowHistoryCount = getWorkflowHistoryCount;
exports.retrieveWorkflowInstanceFromHistory = retrieveWorkflowInstanceFromHistory
exports.getCollectionItemCount = getCollectionItemCount;

//Queue persistence methods

exports.insertQueueItemInstance = insertQueueItemInstance;
exports.removeQueueItem = removeQueueItem;
exports.getQueueHistory = getQueueHistory;
exports.getQueueItemHistoryCount = getQueueItemHistoryCount;
exports.getQueueItemHistory = getQueueItemHistory;
exports.persistQueueItemToHistory = persistQueueItemToHistory;
exports.getQueueItemFromHistory = getQueueItemFromHistory;
exports.getQueue = getQueue;
exports.getQueueItem = getQueueItem;
exports.updateQueueitemWithData = updateQueueitemWithData;



exports.SUBSYSTEM = "Persistence_Mongo";
exports.MODULE = "Mongo";

var COLLECTION_WORKFLOWS = "Workflows";
var COLLECTION_QUEUEITEMS = "queueItems";
var COLLECTION_QUEUEITEMHISTORY = "queueItemHistory";
var COLLECTION_WORKFLOWHISTORY = "workflowHistory";


//General Persistence Functions
var _mongoConnection = undefined;


function mongoConnection(callback) {
    logManager.log("mongoConnection","",exports.SUBSYSTEM);
    if(_mongoConnection != undefined) {
        logManager.log("Connection already open","",exports.SUBSYSTEM);
        callback(_mongoConnection);
        return;
    }
    logManager.log("Opening MongoDB connection","",exports.SUBSYSTEM);

    mongodb.connect("mongodb://SwiftAdministrator:M0vieM0gul@staff.mongohq.com:10017/NodeFlows", function(err, connection) {
        if(err) {
            var log = "Error: " + err;
            logError("Mongo Connection Error:" + log)
            //res.end(log);
        }
        else {
            logManager.log("Mongo connection opened","",exports.SUBSYSTEM);
            _mongoConnection = connection;
            callback(connection);
        }
    });
}

var _openedCollections = {};


function getCollection(collectionName, callback) {
    //logManager.log("getCollection:" + collectionName,"",exports.SUBSYSTEM, collectionName);

    var collection = _openedCollections[collectionName];
    if (collection!==undefined){
        //logManager.log("Reusing opened collection", "", exports.SUBSYSTEM, collectionName);
        callback(collection);
        return;
    }

    mongoConnection(function (connection) {
        logManager.log("Opening collection", "", exports.SUBSYSTEM, collectionName);
        connection.collection(collectionName, function (err, collection) {
            if (err) {
                var log = "MongoDB Collection Error: " + err;
                logManager.logError(log);
            }
            else {
                logManager.log("MongoDB collection opened", "", exports.SUBSYSTEM, collectionName);
                _openedCollections[collectionName] = collection;
                callback(collection);
            }
        });
    });
}


function removeAllItemsFromCollection(collectionName){
    logManager.log("removeAllItemsFromCollection:" + collectionName,"",exports.SUBSYSTEM);
    getCollection(collectionName, function (collection) {
        //collection.find({ "Status": { "$in": [null, "New"]} }, function(err, cursor) {
        collection.find({}, function (err, cursor) {
            cursor.toArray(function (err, items) {
                items.some(function (item) {
                    removeItemFromCollection(collectionName, item._id);
                });
            });
        });
    });
}

function initializeStorage(){
    logManager.log("InitializeStorage","",exports.SUBSYSTEM);
    removeAllItemsFromCollection("Workflows");
    removeAllItemsFromCollection("workflowHistory");
    removeAllItemsFromCollection("queueItemHistory");
    removeAllItemsFromCollection("queueItems");
}

function getItemFromCollection(collectionName, itemId, callback) {
    logManager.log("getItemFromCollection:" + collectionName + "/" + itemId,"",exports.SUBSYSTEM);
    getCollection(collectionName, function (collection) {
        collection.findOne({ _id: itemId }, function (err, item) {
            if (err != undefined) {
                logError(err);
                callback(undefined);
            }
            if (item == null) {
                //logError("Item retrieved from persistence is null:" + collectionName + "/" + itemId);
                callback(undefined);
                //throw new Error("Item retrieved from persistence is null:" + collectionName + "/" + itemId);
            }
            else {
                logManager.log("Item from Persistence:" + JSON.stringify(item), "", exports.SUBSYSTEM);
                callback(item);
            }
        });
    });
}

function removeItemFromCollection(collectionName, itemId, callback) {
    logManager.log("removeItemFromCollection:" + collectionName +"/" + itemId,"",exports.SUBSYSTEM);
    getCollection(collectionName, function (collection) {
        collection.remove({ _id: itemId }, function (err) {
            if (err != undefined) {
                logError(err);
            }
            logManager.log("Completed removing item:" + collectionName + "/" + itemId, "", exports.SUBSYSTEM)
            if (callback !== undefined) {
                callback();
            }
        });
    });
}

function insertItemIntoCollection(collectionName, item, callback) {
    logManager.log("insertItemIntoCollection(" + collectionName + "):" + JSON.stringify(item),"",exports.SUBSYSTEM);
    getCollection(collectionName, function (collection) {
        collection.insert(item, function (err, docs) {
            if (err != undefined) {
                logError(err);
            };
            callback(item);
        });
    });
};

function allItemsInCollection(collectionName, callback) {
    //log("allWorkflowInstances","",exports.SUBSYSTEM);
    getCollection(collectionName,function(collection) {
        //collection.find({ "Status": { "$in": [null, "New"]} }, function(err, cursor) {
        collection.find({}, function(err, cursor) {
            cursor.toArray(function(err, items) {
                callback(items);
            });
        });
    });
}


function getCollectionItemCount(collectionName, callback) {
    //log("allWorkflowInstances","",exports.SUBSYSTEM);
    getCollection(collectionName,function(collection) {
        //collection.find({ "Status": { "$in": [null, "New"]} }, function(err, cursor) {8
        collection.find({}, function(err, cursor) {
            cursor.toArray(function(err, items) {
                callback(items.length);
            });
        });
    });
}


function updateItemWithData(collectionName, id, updateData, callback) {
    logManager.log("update item:" + collectionName + "/" + id + " Data:" + JSON.stringify(updateData),"",exports.SUBSYSTEM);
    getCollection(collectionName,function(collection) {
        collection.update({ '_id': id }, { $set: updateData }, { multi: true }, function(err) {
            if(err != undefined) {
                logError("error:" + err);
            }
            callback(null); //TODO: add error handling
        });
    });
}

//End General Persistence Functions


//Workflow Persistence Calls

function allWorkflowInstances(callback) {
    //log("allWorkflowInstances","",exports.SUBSYSTEM);
    getCollection("Workflows",function(collection) {
        //collection.find({ "Status": { "$in": [null, "New"]} }, function(err, cursor) {
        collection.find({}, function(err, cursor) {
            cursor.toArray(function(err, items) {
                callback(items);
            });
        });
    });
}


function insertWorkflowInstance(workflow, callback) {
    logManager.throwIfUndefined(callback, "A callback is needed");
    logManager.log("insertWorkflowInstance:" + JSON.stringify(workflow),"",exports.SUBSYSTEM);

    insertItemIntoCollection(COLLECTION_WORKFLOWS, workflow, function(workflow){
        callback(workflow);
    });
}

function persistWorkflowToHistory(workflow, callback) {
    logManager.throwIfUndefined(callback, "A callback is needed");
    logManager.log("persisteWorkflowToHistory:" + JSON.stringify(workflow),"",exports.SUBSYSTEM);

    insertItemIntoCollection(COLLECTION_WORKFLOWHISTORY, workflow, function(workflow){
        callback(workflow);
    });
}


function removeWorkflowInstance(workflowId, callback) {
    logManager.log("removeWorkflowInstance:" + workflowId,"",exports.SUBSYSTEM);
    removeItemFromCollection(COLLECTION_WORKFLOWS, workflowId);
}

function retrieveWorkflowInstance(workflowId, callback) {
   logManager.log("retrieveWorkflowInstance:" + workflowId,"",exports.SUBSYSTEM);

   getItemFromCollection(COLLECTION_WORKFLOWS, workflowId, function (storedWorkflow) {
       if (storedWorkflow === undefined) {
           logManager.log("Workflow retrieved was null:" + workflowId, "", exports.SUBSYSTEM);
           callback(storedWorkflow);
       }
       else {
           var workflow2 = new Workflow(storedWorkflow.workflowType, storedWorkflow);
           workflow2.addHistory({ task: "Retrieved", notes: JSON.stringify(workflow2) });
           callback(workflow2);
       }

   });
}


function retrieveWorkflowInstanceFromHistory(workflowId, callback) {
   logManager.log("retrieveWorkflowInstanceFromHistory:" + workflowId,"",exports.SUBSYSTEM);

    getItemFromCollection(COLLECTION_WORKFLOWHISTORY, workflowId, function (storedWorkflow) {
        var workflow2 = new Workflow(storedWorkflow.workflowType, storedWorkflow);
        workflow2.addHistory({ task: "Retrieved", notes: JSON.stringify(workflow2) });
        callback(workflow2);
    });
}


function updateWorkflowInstance(workflowId, updateData, callback) {
    logManager.log("updateWorkflowInstance:" + workflowId + " Data:" + JSON.stringify(updateData),"",exports.SUBSYSTEM);
    getCollection("Workflows",function(collection) {
        //new ObjectID(workflowId)
        collection.update({ '_id': workflowId }, { $set: updateData }, { multi: true }, function(err) {
            if(err != undefined) {
                logError("error:" + err);
            }
            callback(null); //TODO: add error handling
        });
    });
}



function getWorkflowHistory(callback){
    logManager.throwIfUndefined(callback, "A callback is needed");

    allItemsInCollection(COLLECTION_WORKFLOWHISTORY, function (items) {
        callback(items);
    });
}

function getWorkflowHistoryCount(callback){
    logManager.throwIfUndefined(callback, "A callback is needed");

    allItemsInCollection(COLLECTION_WORKFLOWHISTORY, function (items) {
        callback(items.length);
    });
}

//End Workflow persistence calls


//Queue persistence calls

function updateQueueitemWithData(id, updateData, callback) {
    logManager.log("updateQueueitemWithData:" + id + " Data:" + JSON.stringify(updateData),"",exports.SUBSYSTEM);
    updateItemWithData(COLLECTION_QUEUEITEMS, id, updateData, function () {
        callback();
    });


}

function insertQueueItemInstance(item, callback) {
    logManager.log("insertInstance:" + JSON.stringify(item),"",exports.SUBSYSTEM);
    insertItemIntoCollection(COLLECTION_QUEUEITEMS, item, function (item) {
        callback(item);
    });


}

function persistQueueItemToHistory(item, callback) {
    logManager.throwIfUndefined(callback, "A callback is needed");

    logManager.log("persistQueueItemToHistory:" + JSON.stringify(item),"",exports.SUBSYSTEM);
    insertItemIntoCollection(COLLECTION_QUEUEITEMHISTORY, item, function (item) {
        callback(item);
    });
}

function getQueueItemFromHistory(id, callback){
    logManager.throwIfUndefined(callback, "A callback is needed");

    logManager.log("getQueueItemFromHistory:" + id,"",exports.SUBSYSTEM);
    getItemFromCollection("queueItemHistory", id, function (item) {
        if (item === undefined) {
            //logError("queueItem returned was undefined:" + id);
            callback(item);
        }
        else {
            var queueitem = new QueueItem(item);
            callback(queueitem);
        }
    });
}

function getQueueItem(id, callback){
    logManager.throwIfUndefined(callback, "A callback is needed");

    logManager.log("getQueueItem:" + id,"",exports.SUBSYSTEM);
    getItemFromCollection(COLLECTION_QUEUEITEMS, id, function (item) {
        if (item === undefined) {
            //logError("queueItem returned was undefined:" + id);
            callback(item);
        }
        else {
            var queueitem = new QueueItem(item);
            callback(queueitem);
        }

    });
}

function removeQueueItem(id, callback) {
    logManager.log("removeQueueItem:" + id,"",exports.SUBSYSTEM);
    removeItemFromCollection(COLLECTION_QUEUEITEMS, id, function () {
        if (callback !== undefined) {
            callback();
        }
    });
}

function getQueue(callback){
    logManager.throwIfUndefined(callback, "A callback is needed");

    allItemsInCollection(COLLECTION_QUEUEITEMS, function (items) {
        callback(items);
    });
}

//var queueItemHistory = {};
function getQueueHistory(callback){
    logManager.throwIfUndefined(callback, "A callback is needed");

    allItemsInCollection(COLLECTION_QUEUEITEMHISTORY, function (items) {
        callback(items);
    });
}

function getQueueItemHistoryCount(callback){
    logManager.throwIfUndefined(callback, "A callback is needed");
    allItemsInCollection(COLLECTION_QUEUEITEMHISTORY, function (items) {
        callback(items.length);
    });
}

function getQueueItemHistory(queueItemId) {
    var queueItem;
    if(queueStorage[queueItemId] == undefined) {
        queueItem = queueItemHistory[queueItemId];
    }
    else {
        queueItem = queueStorage[queueItemId];
    }
    return queueItem.history;

}



//End of Queue persistence methods



